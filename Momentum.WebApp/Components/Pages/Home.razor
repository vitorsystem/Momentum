@page "/"
@rendermode InteractiveServer
@using System.Globalization

<h1 class="mb-3">Momentum</h1>
<h4 class="text-muted mb-4">Compound Interest Calculator</h4>

<div class="row">
    <div class="col-md-6 mb-3">
        <label class="form-label">Initial Amount ($):</label>
        <input type="number" class="form-control" @bind="InitialValue" @bind:after="CalculateInvestment" placeholder="e.g., 1000" />
    </div>
    <div class="col-md-6 mb-3">
        <label class="form-label">Monthly Contribution ($):</label>
        <input type="number" class="form-control" @bind="MonthlyContribution" @bind:after="CalculateInvestment" placeholder="e.g., 200" />
    </div>
</div>

<div class="row">
    <div class="col-md-6 mb-3">
        <label class="form-label">Annual Interest Rate (%):</label>
        <input type="number" class="form-control" @bind="AnnualInterestRate" @bind:after="CalculateInvestment" placeholder="e.g., 10" />
    </div>
    <div class="col-md-6 mb-3">
        <label class="form-label">Period (in years):</label>
        <input type="number" class="form-control" @bind="PeriodInYears"@bind:after="CalculateInvestment" placeholder="e.g., 5" />
    </div>
</div>

@if (!string.IsNullOrEmpty(FinalBalance))
{
    <div class="alert alert-success mt-4">
        <h4 class="alert-heading">Simulation Result:</h4>
        <hr>
        <p class="mb-1"><strong>Final Balance:</strong> @FinalBalance</p>
        <p class="mb-1"><strong>Total Invested:</strong> @TotalInvested</p>
        <p class="mb-0"><strong>Total Interest Earned:</strong> @TotalInterestEarned</p>
    </div>
}



@code {
    // Variables for user input
    private string? InitialValue;
    private string? MonthlyContribution;
    private string? AnnualInterestRate;
    private string? PeriodInYears;

    // Variables for results
    private string? FinalBalance;
    private string? TotalInvested;
    private string? TotalInterestEarned;

    private void CalculateInvestment()
    {
        // Validate inputs
        bool isValidInitial = double.TryParse(InitialValue, out double c);
        bool isValidMonthly = double.TryParse(MonthlyContribution, out double m);
        bool isValidRate = double.TryParse(AnnualInterestRate, out double i);
        bool isValidPeriod = int.TryParse(PeriodInYears, out int t);

        if (!isValidInitial || !isValidMonthly || !isValidRate || !isValidPeriod)
        {
            FinalBalance = "Please enter valid numbers in all fields.";
            TotalInvested = "Invalid input";
            TotalInterestEarned = "Invalid input";
            return;
        }

        // Prepare the variables for calculation
        int totalMonths = t * 12;
        double monthlyInterestRate = (i / 100) / 12;
        double currentBalance = c;

        // Compund interest calculation loop
        for (int month = 0; month < totalMonths; month++)
        {
            currentBalance += m;
            currentBalance += currentBalance * monthlyInterestRate;
        }

        // Calculate total contributions and interest earned
        double totalContributed = c + (m * totalMonths);
        double totalInterest = currentBalance - totalContributed;
        
        var cultureUS = new CultureInfo("en-US");
        FinalBalance = currentBalance.ToString("C", cultureUS);
        TotalInvested = totalContributed.ToString("C", cultureUS);
        TotalInterestEarned = totalInterest.ToString("C", cultureUS);
    }

        //
}